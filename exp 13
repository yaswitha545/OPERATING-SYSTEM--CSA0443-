#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_BLOCKS 10
#define MAX_PROCESSES 5

void firstFit(int blockSize[], int blockCount, int processSize[], int processCount) {
    int allocation[MAX_PROCESSES];
    for (int i = 0; i < processCount; i++) {
        allocation[i] = -1; 
        for (int j = 0; j < blockCount; j++) {
            if (blockSize[j] >= processSize[i]) {
                allocation[i] = j;
                blockSize[j] -= processSize[i];
                break;
            }
        }
    }

    printf("\nFirst Fit Allocation:\n");
    for (int i = 0; i < processCount; i++) {
        if (allocation[i] != -1) {
            printf("Process %d -> Block %d\n", i, allocation[i]);
        } else {
            printf("Process %d -> Not Allocated\n", i);
        }
    }
}

void bestFit(int blockSize[], int blockCount, int processSize[], int processCount) {
    int allocation[MAX_PROCESSES];
    for (int i = 0; i < processCount; i++) {
        allocation[i] = -1; 
        int bestIdx = -1;
        for (int j = 0; j < blockCount; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (bestIdx == -1 || blockSize[j] < blockSize[bestIdx]) {
                    bestIdx = j;
                }
            }
        }
        if (bestIdx != -1) {
            allocation[i] = bestIdx;
            blockSize[bestIdx] -= processSize[i];
        }
    }

    printf("\nBest Fit Allocation:\n");
    for (int i = 0; i < processCount; i++) {
        if (allocation[i] != -1) {
            printf("Process %d -> Block %d\n", i, allocation[i]);
        } else {
            printf("Process %d -> Not Allocated\n", i);
        }
    }
}

void worstFit(int blockSize[], int blockCount, int processSize[], int processCount) {
    int allocation[MAX_PROCESSES];
    for (int i = 0; i < processCount; i++) {
        allocation[i] = -1; 
        int worstIdx = -1;
        for (int j = 0; j < blockCount; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (worstIdx == -1 || blockSize[j] > blockSize[worstIdx]) {
                    worstIdx = j;
                }
            }
        }
        if (worstIdx != -1) {
            allocation[i] = worstIdx;
            blockSize[worstIdx] -= processSize[i];
        }
    }

    printf("\nWorst Fit Allocation:\n");
    for (int i = 0; i < processCount; i++) {
        if (allocation[i] != -1) {
            printf("Process %d -> Block %d\n", i, allocation[i]);
        } else {
            printf("Process %d -> Not Allocated\n", i);
        }
    }
}

int main() {
    int blockSize[MAX_BLOCKS], processSize[MAX_PROCESSES];
    int blockCount, processCount;

    printf("Enter the number of memory blocks: ");
    scanf("%d", &blockCount);
    printf("Enter the sizes of the memory blocks:\n");
    for (int i = 0; i < blockCount; i++) {
        scanf("%d", &blockSize[i]);
    }

 
    printf("Enter the number of processes: ");
    scanf("%d", &processCount);
    printf("Enter the sizes of the processes:\n");
    for (int i = 0; i < processCount; i++) {
        scanf("%d", &processSize[i]);
    }

    int blockSizeFirst[MAX_BLOCKS], blockSizeBest[MAX_BLOCKS], blockSizeWorst[MAX_BLOCKS];
    for (int i = 0; i < blockCount; i++) {
        blockSizeFirst[i] = blockSizeBest[i] = blockSizeWorst[i] = blockSize[i];
    }

    firstFit(blockSizeFirst, blockCount, processSize, processCount);
    bestFit(blockSizeBest, blockCount, processSize, processCount);
    worstFit(blockSizeWorst, blockCount, processSize, processCount);

    return 0;
}

input:
Enter the number of memory blocks: 5
Enter the sizes of the memory blocks:
100 500 200 300 600
Enter the number of processes: 4
Enter the sizes of the processes:
212 417 112 426

output:
First Fit Allocation:
Process 0 -> Block 1
Process 1 -> Block 4
Process 2 -> Block 2
Process 3 -> Not Allocated

Best Fit Allocation:
Process 0 -> Block 3
Process 1 -> Block 4
Process 2 -> Block 2
Process 3 -> Not Allocated

Worst Fit Allocation:
Process 0 -> Block 4
Process 1 -> Block 1
Process 2 -> Block 2
Process 3 -> Not Allocated
