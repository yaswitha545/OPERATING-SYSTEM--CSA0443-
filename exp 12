#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

sem_t forks[NUM_PHILOSOPHERS];  
sem_t mutex;                   

void* philosopher(void* arg) {
    int id = (int)arg;  
    while (1) {
        
        printf("Philosopher %d is thinking.\n", id);
        sleep(1);

        sem_wait(&mutex);           
        sem_wait(&forks[id]);       
        sem_wait(&forks[(id + 1) % NUM_PHILOSOPHERS]); 
        sem_post(&mutex);           

        printf("Philosopher %d is eating.\n", id);
        sleep(1);

        
        sem_post(&forks[id]);       
        sem_post(&forks[(id + 1) % NUM_PHILOSOPHERS]);  
    }
    return NULL;
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int ids[NUM_PHILOSOPHERS];

    sem_init(&mutex, 0, 1);  
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_init(&forks[i], 0, 1);  
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_destroy(&forks[i]);
    }
    sem_destroy(&mutex);

    return 0;
}


output:
Philosopher 0 is thinking.
Philosopher 1 is thinking.
Philosopher 2 is thinking.
Philosopher 3 is thinking.
Philosopher 4 is thinking.
Philosopher 0 is eating.
Philosopher 1 is eating.
Philosopher 2 is thinking.
Philosopher 3 is eating.
Philosopher 4 is thinking.
...
